{"version":3,"sources":["Modal.tsx","Questions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Modal","this","props","show","className","title","type","onClick","close","body","target","rel","href","link","React","Component","Questions","fetchList","setState","loading","axios","get","params","pagesize","order","then","res","lists","data","items","hasMore","state","length","catch","err","error","message","showModal","temp","closeModal","window","onscroll","debounce","innerHeight","document","documentElement","scrollTop","offsetHeight","style","width","map","value","key","question_id","owner","display_name","event","creation_date","color","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.056967f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  title: string;\r\n  link: string;\r\n  close: (event: React.MouseEvent) => void;\r\n  body: string;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass Modal extends React.Component<IProps, IState> {\r\n  render() {\r\n    if (this.props.show) {\r\n      return (\r\n        <div className=\"modalMain\">\r\n          <div className=\"modalContainer\">\r\n            <div className=\"modal-header\">\r\n              <h4 className=\"modal-title\">{this.props.title}</h4>\r\n              <button\r\n                type=\"button\"\r\n                className=\"close\"\r\n                onClick={this.props.close}\r\n              >\r\n                &times;\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"modal-body\">\r\n              <p>\r\n                <b>{this.props.body}</b>\r\n              </p>\r\n              <div>\r\n                <a\r\n                  className=\"button\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  href={this.props.link}\r\n                >\r\n                  {this.props.link}\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={this.props.close}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else return null;\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Modal from \"./Modal\";\r\nimport debounce from \"lodash.debounce\";\r\nimport \"./Questions.css\";\r\n\r\nconst pagesize = 100;\r\nconst order = \"asc\";\r\nconst body = \"firebase\";\r\n\r\ninterface IValues {\r\n  owner: {\r\n    display_name: string;\r\n  };\r\n\r\n  question_id: string;\r\n  creation_date: number;\r\n  link: string;\r\n  title: string;\r\n}\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n  lists: IValues[];\r\n  loading: boolean;\r\n  error: boolean;\r\n  hasMore: boolean;\r\n  show: boolean;\r\n  data: string;\r\n  temp: string;\r\n}\r\n\r\nexport default class Questions extends Component<IProps, IState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: \"\",\r\n      temp: \"\",\r\n      lists: [],\r\n      loading: false,\r\n      error: false,\r\n      hasMore: true,\r\n      show: false,\r\n    };\r\n\r\n    window.onscroll = debounce(() => {\r\n      const {\r\n        fetchList,\r\n        state: { error, loading, hasMore },\r\n      } = this;\r\n\r\n      // Bails early if:\r\n      // * there's an error\r\n      // * it's already loading\r\n      // * there's nothing left to load\r\n      if (error || loading || !hasMore) return;\r\n\r\n      // Checks that the page has scrolled to the bottom\r\n      if (\r\n        window.innerHeight + document.documentElement.scrollTop ===\r\n        document.documentElement.offsetHeight\r\n      ) {\r\n        fetchList();\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchList();\r\n  }\r\n\r\n  fetchList = () => {\r\n    this.setState({ loading: true }, () => {\r\n      axios\r\n        .get(\r\n          `https://api.stackexchange.com/2.2/search/advanced?site=stackoverflow`,\r\n          {\r\n            params: {\r\n              pagesize,\r\n              order,\r\n              body,\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          const data = res.data;\r\n          const lists = data.items;\r\n\r\n          this.setState({\r\n            hasMore: this.state.lists.length < pagesize,\r\n            lists,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            error: err.message,\r\n            loading: false,\r\n          });\r\n        });\r\n    });\r\n  };\r\n\r\n  showModal = (title: string, link: string) => {\r\n    this.setState({ show: true, temp: title, data: link });\r\n  };\r\n\r\n  closeModal = () => {\r\n    this.setState({ show: false });\r\n  };\r\n\r\n  render() {\r\n    const { loading, error, hasMore } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"customers\">\r\n          <thead>\r\n            <tr>\r\n              <th>Author</th>\r\n              <th>Title</th>\r\n              <th style={{ width: \"15%\" }}>Creation date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.lists &&\r\n              this.state.lists.map((value) => (\r\n                <tr key={value.question_id}>\r\n                  <td>{value.owner.display_name}</td>\r\n                  <td\r\n                    onClick={(event: React.MouseEvent) => {\r\n                      this.showModal(value.title, value.link);\r\n                    }}\r\n                  >\r\n                    {value.title}\r\n                  </td>\r\n                  <td>{value.creation_date}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {error && <div style={{ color: \"#900\" }}>{error}</div>}\r\n        {loading && (\r\n          <div>\r\n            <h2>Loading...</h2>\r\n          </div>\r\n        )}\r\n        {!hasMore && (\r\n          <div>\r\n            <h2>You did it! You reached the end!</h2>\r\n          </div>\r\n        )}\r\n\r\n        <Modal\r\n          title={this.state.temp}\r\n          show={this.state.show}\r\n          close={this.closeModal}\r\n          link={this.state.data}\r\n          body={body}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Questions from \"./Questions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Infinite Scroll of Questions</h2>\n      <Questions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}